#!/usr/bin/php
<?php
# Copyright (c) 2013 Ash Smith / University of Southampton
# License: GPL

# This file is part of Event Feed Aggregator.

# Event Feed Aggregator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Event Feed Aggregator is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Event Feed Aggregator.  If not, see <http://www.gnu.org/licenses/>.

global $diary_config;
$diary_config["path"] = dirname(dirname(__FILE__));
require($diary_config["path"].'/etc/config.php');
include $diary_config["path"].'/lib/scraper-utils.php';

function staffbookMunge($url)
{
	return(preg_replace("|^http://([^/]+)/pdu/Academic%20Practice/Teaching%20&%20Learning/|", "http://$1/pdu/Academic%20Practice/Teaching%20and%20Learning/", $url));
}

initialiseScraper();

// Get the RSS data from the Feed URL.
list($info, $sourcedocuments) = getStaffBookJSON($options->FeedURL);

if(is_array($info))
{
	foreach($info as $item)
	{
		// Process the event.
		$data[] = processItem($item, $options, $sourcedocuments);
	}
}

// Output the data as XML.
echo generateEventXML($data, $sourcedocuments, $issues);

exit(0);

/**
 * Process a single event.
 *
 * @param	object	$item		The item to process.
 * @param	array	$options	The options passed to this script.
 */
function process($item, $options, $sourcedocuments)
{
	$title = trim($item['title']);
	$link = staffbookMunge((string)str_replace(' ', '%20', trim($item['url'])));
	$extrainfo = getExtraInfo($link);
	
	$desc = explode("\n", $item['description']);
	$pdate = array();
	while(count($desc) > 0 && trim($desc[0]) == "")
	{
		array_shift($desc);
	}

	$dss = $item['start'];
	$dse = $item['finish'];
	if(strlen($dse) < 19)
	{
		$dse = substr($dss, 0, strlen($dss) - strlen($dse)) . $dse;
	}
	$dts = strtotime($dss);
	$dte = strtotime($dse);

	$date = array();
	$date['from'] = date("c", $dts);
	$date['to'] = date("c", $dte);
	$pdate[] = $date;

	$type = "" . $options->Type;
	$type = preg_replace("/[^0-9a-zA-Z]/", "", $type);

	$desc = trim(implode("\n", $desc));
	$res = array(
		'title'		=> $title,
		'link'		=> $link,
		'date'		=> $pdate,
		'desc'		=> $desc,
		'feedName'	=> (string)$options->FeedName,
		'type'		=> $type,
		'feedID'	=> (string)$options->FeedID,
		'host'		=> (string)$options->FacultyUnitGroup,
		'tags'		=> explode(" ", $options->Tags),
	);
	foreach($extrainfo as $k => $v)
	{
		if(is_array($v) || trim($v) != "")
		{
			$res[$k] = $v;
		}
	}
	foreach($sourcedocuments as $sd)
	{
		$res['sourceDocuments'][] = $sd;
	}
	return $res;
}

function unfudgeJsonString($text)
{
	$json = str_replace("\\'", "'", $text);
	$json = mb_convert_encoding($json, 'HTML-ENTITIES', 'utf-8');
	$ret = json_decode($json, true);

	return($ret);
}

function unfudgeJsonFile($url)
{
	$json = file_get_contents($url);

	return(unfudgeJsonString($json));
}

function getStaffBookJSON(&$url, $timeout=1)
{
	$starttime = microtime(true);
	$prev_error_state = libxml_use_internal_errors(true);
	list($rss, $sourcedocuments, $src) = getFromURL($url, $timeout, 'unfudgeJsonFile', 'unfudgeJsonString');
	libxml_use_internal_errors($prev_error_state);
	$sourcedocuments[] = makeProvenanceInfo('getRSS', (string)$src, null, $starttime, microtime(true));
	return array($rss, $sourcedocuments);
}
