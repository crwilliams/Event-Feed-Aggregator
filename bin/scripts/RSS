#!/usr/bin/php
<?php
# Copyright (c) 2012 Colin Williams / University of Southampton
# License: GPL

# This file is part of Event Feed Aggregator.

# Event Feed Aggregator is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Event Feed Aggregator is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

require '../etc/config.php';
include $diary_config["path"].'/lib/utils.php';
include $diary_config["path"].'/lib/options.php';

$rss = getRSS($options->FeedURL);

$data = array();
if($rss != null && $rss->channel != null && $rss->channel->item != null)
{
	foreach($rss->channel->item as $item)
	{
		$data[] = process($item, $options);
	}
}
echo generateEventXML($data);

function process($item, $options)
{
	$title = trim($item->title);
	$link = (string)str_replace(' ', '%20', trim($item->link));
	$extrainfo = getExtraInfo($link);
	$desc = explode("\n", $item->description);
	$pdate = array();
	while(trim($desc[0]) == "")
		array_shift($desc);
	$pdate = getDates($desc);
	$desc = trim(implode("\n", $desc));
	$res = array(
		'title'		=> $title,
		'link'		=> $link,
		'date'		=> $pdate,
		'desc'		=> $desc,
		'feedName'	=> (string)$options->FeedName,
		'type'		=> (string)$options->Type,
		'feedID'	=> (string)$options->FeedID,
		'host'		=> (string)$options->FacultyUnitGroup,
		'tags'		=> explode(" ", $options->Tags),
	);
	foreach($extrainfo as $k => $v)
	{
		if(trim($v) != "")
			$res[$k] = $v;
	}
	return $res;
}

function getDates(&$desc)
{
	$pdate = array();
	if(count($desc) > 0)
	{
		$compstr = preg_replace('/[^A-Za-z0-9 ,:\[\]-]+/', ' ', trim($desc[0]));
		//12:00, 26 June 2011
		//12:00 - 13:00, 26 June 2011
		if(preg_match('/^\[(([0-2]?[0-9]:[0-5][0-9])( - ([0-2]?[0-9]:[0-5][0-9]))?, )?(([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9]))\]$/', $compstr, $matches))
		{
			if($matches[2] == "" && $matches[4] == "")
			{
				$date['date'] = date('c', strtotime($matches[6].' '.$matches[7].' '.$matches[8]));
				$pdate[] = $date;
			}
			else
			{
				$tmpfrom = strtotime($matches[2].' '.$matches[6].' '.$matches[7].' '.$matches[8]);
				$date['from'] = date('c', $tmpfrom);
				if($matches[4] != "")
				{
					$tmpto = strtotime($matches[4].' '.$matches[6].' '.$matches[7].' '.$matches[8]);
					$date['to'] = date('c', $tmpto);
				}
				$pdate[] = $date;
			}
			array_shift($desc);
		}
		//12:00, 26 June 2011 - 12:30, 1 July 2011
		else if(preg_match('/^\[([0-2]?[0-9]:[0-5][0-9]), (([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9])) - ([0-2]?[0-9]:[0-5][0-9]), (([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9]))\]$/', $compstr, $matches))
		{
			$tmpfrom = strtotime($matches[1].' '.$matches[3].' '.$matches[4].' '.$matches[5]);
			$date['from'] = date('c', $tmpfrom);
			$tmpto = strtotime($matches[6].' '.$matches[8].' '.$matches[9].' '.$matches[10]);
			$date['to'] = date('c', $tmpto);
			$pdate[] = $date;
			array_shift($desc);
		}
		//09:00 - 18:00, 8 - 10 April 2011
		else if(preg_match('/^\[([0-2]?[0-9]:[0-5][0-9]) - ([0-2]?[0-9]:[0-5][0-9]), ([1-3]?[0-9]) - ([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9])\]$/', $compstr, $matches))
		{
			$datefrom = new DateTime($matches[3].' '.$matches[5].' '.$matches[6]);
			$dateto = new DateTime($matches[4].' '.$matches[5].' '.$matches[6]);
			while($datefrom <= $dateto)
			{
				$tmpfrom = strtotime($matches[1].' '.date_format($datefrom, 'Y/m/d'));
				$tmpto = strtotime($matches[2].' '.date_format($datefrom, 'Y/m/d'));
				$date['from'] = date('c', $tmpfrom);
				$date['to'] = date('c', $tmpto);
				$pdate[] = $date;
				date_add($datefrom, new DateInterval('P1D'));
			}
			array_shift($desc);
		}
		//5 February 2012 - 1 April 2012
		else if(preg_match('/^\[([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9]) - ([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9])\]$/', $compstr, $matches))
		{
			$datefrom = new DateTime($matches[1].' '.$matches[2].' '.$matches[3]);
			$dateto = new DateTime($matches[4].' '.$matches[5].' '.$matches[6]);
			while($datefrom <= $dateto)
			{
				$date['date'] = date_format($datefrom, 'c');
				$pdate[] = $date;
				date_add($datefrom, new DateInterval('P1D'));
			}
			array_shift($desc);
		}
		//8 - 9 July 2011
		else if(preg_match('/^\[([1-3]?[0-9]) - ([1-3]?[0-9]) ([A-Z][a-z][a-z])[a-z]* (20[0-9][0-9])\]$/', $compstr, $matches))
		{
			$datefrom = new DateTime($matches[1].' '.$matches[3].' '.$matches[4]);
			$dateto = new DateTime($matches[2].' '.$matches[3].' '.$matches[4]);
			while($datefrom <= $dateto)
			{
				$date['date'] = date_format($datefrom, 'c');
				$pdate[] = $date;
				date_add($datefrom, new DateInterval('P1D'));
			}
			array_shift($desc);
		}
	}
	else
	{
		$pdate = array();
	}
	return $pdate;
}

function getExtraInfo(&$link)
{
	$l = $link;
	$dom = getHTML($l, 24);
	$link = $l;
	if($dom == null) { return array(); }
	$base = parse_url($link, PHP_URL_SCHEME).'://'.parse_url($link, PHP_URL_HOST);
	$div = $dom->find('div[id=content]', 0);
	if($div == null) { return array(); }
	$div = $div->find('div.iw_component', 0);
	if($div == null) { return array(); }
	$div->find('div', 0);
	if($div == null) { return array(); }
	$venue = "";
	$venuelink = "";
	$speaker = "";
	$speakerlink = "";
	foreach($div->children() as $c)
	{
		if(strtolower($c->plaintext) == 'venue')
		{
			$venue = $c->next_sibling()->plaintext;
			$venuelink = getVenueLink($venue);
		}
		if(strtolower($c->plaintext) == 'speaker information')
		{
			$speakerel = $c->next_sibling();
			if($slink = $speakerel->find('a', 0))
			{
				$speaker = tidySpeaker($slink->innertext);
				$speakerlink = $slink->href;
				if($speakerlink[0] == '/')
				{
					$speakerlink = $base.$speakerlink;
				}
				if($speakerlink == 'http://')
				{
					$speakerlink = "";
				}
			}
			else if($span = $speakerel->find('span', 0))
			{
				$speaker = tidySpeaker($span->innertext);
			}
		}
	}
	return array(
		'venue' => str_replace(array("\n", "\r"), " ", $venue),
		'venuelink' => str_replace(array("\n", "\r"), " ", $venuelink),
		'speaker' => str_replace(array("\n", "\r"), " ", $speaker),
		'speakerlink' => str_replace(array("\n", "\r"), " ", $speakerlink),
		//'link' => (string)$link,
	);
}

function tidySpeaker($text)
{
	return preg_replace('/[, ] .*/', '', trim($text));
}

